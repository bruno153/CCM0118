/**************************************************************************
* Bruno Daki Yamada
* Tibor Zequini Boglar
*
* This java class uses the linear feedback shift register to generate a
* deterministic sequence of binary bits from a binary string seed and 
* a tap integer number. The deterministic sequence of bits can be
* interpreted of random sequence of integers by generate().
*
* Constructor:
* LFSH(seed, tap);
* Ohter methods:
* step(); - returns the random bit generated by executing one step.
* generate(steps); - returns a generated int by executing N steps.
* toString(); - prints the contents of the registers.
**************************************************************************/
public class LFSR{
	private String sSequence;
	private int iTap;
	
	public LFSR(String seed, int iTap){
		this.sSequence = seed;
		this.iTap = iTap;
	}
	
	public int step(){
		int iReturn = 0;
		char[] cSequence = sSequence.toCharArray();
		if((cSequence[0]=='0')^(cSequence[sSequence.length()-1 - iTap]=='0'))        //XOR operation
			iReturn = 1;
		for(int i = 0; i < sSequence.length()-1; i++){                               //shifts the array
			cSequence[i] = cSequence[i + 1];
		}
		if(iReturn == 0)                                                             //applies the XOR operation value
			cSequence[sSequence.length()-1] = '0';
		else
			cSequence[sSequence.length()-1] = '1';
		sSequence = String.valueOf(cSequence);                                       //updates the string and return
		return iReturn;
	}
	
	public int generate(int iStep){
		int iGenerate = 0;
		for(int i = 0; i < iStep; i++){
			int iBit = this.step();                                                  //steps forward
			iGenerate += (int)Math.pow(2, iStep - i - 1) * iBit;                     //converts the bit to decimal and adds
		}
		return iGenerate;
	}
	
	public String toString(){
		return sSequence;
	}
	
	public static void main(String[] args){
		LFSR lol = new LFSR("0110100001001010", 8);
		
		for(int i = 0; i < 10; i++){
			int r = lol.generate(5);
			System.out.println(lol + " "  + r);
		}
	}
}